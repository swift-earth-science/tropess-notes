Traceback (most recent call last):
  File "/Users/valentin/Work/Git/Swift/tropess-notes/.venv/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/valentin/Work/Git/Swift/tropess-notes/.venv/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/valentin/Work/Git/Swift/tropess-notes/.venv/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/valentin/.pyenv/versions/3.10.0/lib/python3.10/asyncio/base_events.py", line 641, in run_until_complete
    return future.result()
  File "/Users/valentin/Work/Git/Swift/tropess-notes/.venv/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/valentin/Work/Git/Swift/tropess-notes/.venv/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/valentin/Work/Git/Swift/tropess-notes/.venv/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Specify date range
start_date = datetime.date(2023, 6, 1)
end_date = datetime.date(2023, 6, 2)

# Loop through the date range and plot Carbon Monoxide for each day
for current_date in pd.date_range(start_date, end_date):
    # Open the netCDF file
    file_date = current_date.strftime("%Y%m%d")
    dataset = Dataset(f'./data/TROPESS_CrIS-JPSS1_L2_Summary_CO_{file_date}_MUSES_R1p20_FS_F0p6.nc', 'r')

    # Read the data from your variables
    latitude = dataset.variables['latitude'][:]
    longitude = dataset.variables['longitude'][:]
    x_col = dataset.variables['x_col'][:]

    dataset.close()

    # Filter the data for North America only
    latitude_max = 80.0
    latitude_min = 10.0
    longitude_max = -40.0
    longitude_min = -170.0

    north_america_only = np.where(
        (latitude > latitude_min) & (latitude < latitude_max) & 
        (longitude > longitude_min) &(longitude < longitude_max)
    )[0]

    latitude = latitude[north_america_only]
    longitude = longitude[north_america_only]
    x_col = x_col[north_america_only]

    # Calculate width and height
    aspect_ratio = (longitude_max - longitude_min) / (latitude_max - latitude_min)
    w = 3600; h = w / aspect_ratio

    # Specify figure size (in inches)
    dpi = 300; 
    plt.figure(figsize=(w / dpi, h / dpi))  

    # Create a basemap instance
    m = Basemap(projection='cyl', resolution='i',
                llcrnrlat=10, urcrnrlat=80,  # set latitude limits to 10 and 80
                llcrnrlon=-170, urcrnrlon=-40)  # set longitude limits to -170 and -40

    m.drawcoastlines(linewidth=0.2)
    m.drawstates(linewidth=0.2, color='gray')

    # Draw parallels (latitude lines) and meridians (longitude lines)
    parallels = np.arange(-90., 91., 10.)
    m.drawparallels(parallels, labels=[True,False,False,False], linewidth=0.3)

    meridians = np.arange(-180., 181., 10.)
    m.drawmeridians(meridians, labels=[False,False,False,True], linewidth=0.3)

    # Get CrIS pixel size in degrees, pixel is 14 x 14 km, 1 degree is roughly 111.1 km
    cris_pixel_size_deg = 14.0 / 111.1 

    # Get the grid for the interpolated values
    grid_lat, grid_lon = np.mgrid[10:81:cris_pixel_size_deg, -170:-39:cris_pixel_size_deg]

    # Interpolate the data using griddata
    grid_x_col = griddata((latitude, longitude), x_col, (grid_lat, grid_lon), method='linear', rescale=True)

    # Find the distance to the nearest original point for each point in the interpolated grid
    tree = cKDTree(np.vstack((latitude, longitude)).T)
    dist, _ = tree.query(np.vstack((grid_lat.ravel(), grid_lon.ravel())).T)

    # Reshape the distance array to have the same shape as the x_col grid
    dist_grid = dist.reshape(grid_x_col.shape)

    # Mask the interpolated values that are too far from any original point
    max_distance_degrees = 2.0
    grid_x_col[dist_grid > max_distance_degrees] = np.nan

    # Plot the interpolated data using pcolormesh instead of scatter
    sc = m.pcolormesh(grid_lon, grid_lat, grid_x_col, latlon=True, cmap='jet', alpha=0.7, vmin=60.0, vmax=180.0)

    # Add a colorbar
    cbar = m.colorbar(sc, location='bottom', pad="10%")
    cbar.set_label('Column-averaged dry-air mixing ratio of carbon monoxide from the surface to Top of Atmosphere (TOA), ppbv')

    # set plot title
    title_date = current_date.strftime("%d-%b-%Y")
    title_min = np.min(x_col)
    title_max = np.max(x_col)
    plt.title(f'TROPESS - CrIS JPSS-1 - Carbon Monoxide Column (XCO) - {title_date}\nMin: {title_min:.01f}, Max: {title_max:.01f} ppbv')

    plt.show()

    plt.close()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[2], line 9[0m
[1;32m      6[0m [38;5;28;01mfor[39;00m current_date [38;5;129;01min[39;00m pd[38;5;241m.[39mdate_range(start_date, end_date):
[1;32m      7[0m     [38;5;66;03m# Open the netCDF file[39;00m
[1;32m      8[0m     file_date [38;5;241m=[39m current_date[38;5;241m.[39mstrftime([38;5;124m"[39m[38;5;124m%[39m[38;5;124mY[39m[38;5;124m%[39m[38;5;124mm[39m[38;5;132;01m%d[39;00m[38;5;124m"[39m)
[0;32m----> 9[0m     dataset [38;5;241m=[39m [43mDataset[49m[43m([49m[38;5;124;43mf[39;49m[38;5;124;43m'[39;49m[38;5;124;43m./data/TROPESS_CrIS-JPSS1_L2_Summary_CO_[39;49m[38;5;132;43;01m{[39;49;00m[43mfile_date[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43m_MUSES_R1p20_FS_F0p6.nc[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mr[39;49m[38;5;124;43m'[39;49m[43m)[49m
[1;32m     11[0m     [38;5;66;03m# Read the data from your variables[39;00m
[1;32m     12[0m     latitude [38;5;241m=[39m dataset[38;5;241m.[39mvariables[[38;5;124m'[39m[38;5;124mlatitude[39m[38;5;124m'[39m][:]

File [0;32msrc/netCDF4/_netCDF4.pyx:2449[0m, in [0;36mnetCDF4._netCDF4.Dataset.__init__[0;34m()[0m

File [0;32msrc/netCDF4/_netCDF4.pyx:2012[0m, in [0;36mnetCDF4._netCDF4._ensure_nc_success[0;34m()[0m

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: './data/TROPESS_CrIS-JPSS1_L2_Summary_CO_20230601_MUSES_R1p20_FS_F0p6.nc'

